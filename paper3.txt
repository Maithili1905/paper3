/*Q1. Union and Intersection of two sorted arrays.

Given two sorted arrays, find their union and intersection.

Input : arr1[] = {1, 3, 4, 5, 7} arr2[] = {2, 3, 5, 6} 
Output :
Union : {1, 2, 3, 4, 5, 6, 7} 
Intersection : {3, 5} 

Input : arr1[] = {2, 5, 6} arr2[] = {4, 6, 8, 10} 
Output : 
Union : {2, 4, 5, 6, 8, 10} 
Intersection : {6} */

// C program to find union of 

#include<stdio.h> 
  
int printUnion(int arr1[], int arr2[], int m, int n) 
{ 
  int i = 0, j = 0; 
  while (i < m && j < n) 
  { 
    if (arr1[i] < arr2[j]) 
      printf(" %d ", arr1[i++]); 
    else if (arr2[j] < arr1[i]) 
      printf(" %d ", arr2[j++]); 
    else
    { 
      printf(" %d ", arr2[j++]); 
      i++; 
    } 
  } 
  
  while(i < m) 
   printf(" %d ", arr1[i++]); 
  while(j < n) 
   printf(" %d ", arr2[j++]); 
} 
  
int main() 
{ 
  int arr1[] = {1, 2, 4, 5, 6}; 
  int arr2[] = {2, 3, 5, 7}; 
  int m = sizeof(arr1)/sizeof(arr1[0]); 
  int n = sizeof(arr2)/sizeof(arr2[0]); 
  printUnion(arr1, arr2, m, n); 
  getchar(); 
  return 0; 
} 




/*Q2. Program for array rotation.

Write a function rotate(arr[], d, n) that rotates arr[] of size n by d elements.
Rotation of the above array by 2 will make array

Input: arr[] = {1,2,3,4,5,6}, n = 6, d = 2
Output: arr[] = {3,4,5,6,1,2}*/

#include <stdio.h>

void leftRotatebyOne(int arr[], int n);

void leftRotate(int arr[], int d, int n)
{
    int i;
    for (i = 0; i < d; i++)
        leftRotatebyOne(arr, n);
}
 
void leftRotatebyOne(int arr[], int n)
{
    int temp = arr[0], i;
    for (i = 0; i < n - 1; i++)
        arr[i] = arr[i + 1];
    arr[n-1] = temp;
}
 
void printArray(int arr[], int n)
{
    int i;
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);
}

int main()
{
    int arr[] = { 1, 2, 3, 4, 5, 6 };
    leftRotate(arr, 2, 6);
    printArray(arr, );
    return 0;
}


